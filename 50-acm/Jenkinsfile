pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')
    }

    stages {
        stage('Init and Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 50-acm
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    script {
                        def action = "${params.ACTION}"
                        if (action == 'apply') {
                            sh """
                                cd 50-acm
                                terraform apply -auto-approve tfplan
                            """
                        } else if (action == 'destroy') {
                            sh """
                                cd 50-acm
                                terraform destroy -auto-approve
                            """
                        } else {
                            error("Invalid action: ${action}")
                        }
                    }
                }
            }
        }

        stage('Trigger Multi') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('ALB') {
                    steps {
                        build job: '60-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '70-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '80-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }
    }

    post {
        always {
            echo "This section runs always."
            deleteDir()
        }
        success {
            echo "Pipeline succeeded."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
