pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    // environment {
    //     DEBUG = 'true'
    // }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')
    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 50-acm
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            /* input {
                message "Should we continue to ${params.ACTION}"
                ok "Yes, we should."
            } */
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 50-acm
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        }
        stage ('Trigger multi') {
             when {
                 expression { params.ACTION == 'apply' }
                  }
                parallel{
                    stage('alb'){
                    steps{
                 build job: '60-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                 }
                    }
                    stage('ecr'){
                    steps{
                 build job: '70-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                 }
                    }
                    stage('cdn'){
                    steps{
                 build job: '80-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                 }
                    }
                 
            }

    }

    post {
        always{
            echo "This sections runs always"
            deleteDir()
        }
        success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}